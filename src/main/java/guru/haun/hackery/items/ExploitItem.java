package guru.haun.hackery.items;

import guru.haun.hackery.api.exploits.ExploitUtils;
import guru.haun.hackery.api.exploits.IExploit;
import net.minecraft.creativetab.CreativeTabs;
import net.minecraft.entity.Entity;
import net.minecraft.entity.EntityLiving;
import net.minecraft.entity.EntityLivingBase;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.item.EnumAction;
import net.minecraft.item.Item;
import net.minecraft.item.ItemStack;
import net.minecraft.util.BlockPos;
import net.minecraft.util.EnumFacing;
import net.minecraft.world.World;

import java.util.List;
import java.util.Map;

public class ExploitItem extends Item {
	
	private static IExploit getExploit(ItemStack is) {
		return ExploitUtils.getExploitById(is.getItemDamage());
	}
	
	
	public ExploitItem() {
		setHasSubtypes(true);
		setMaxDamage(0);	
		setMaxStackSize(1);
	}
	
	public void getSubItems(Item item, CreativeTabs tab, List list){
		Map<Integer, IExploit> ex = ExploitUtils.getAllExploits();
        for (IExploit iExploit : ex.values()) {
            list.add(new ItemStack(this, 1, iExploit.getId()));
        }
	}
	
	public boolean hitEntity(ItemStack is, EntityLivingBase attacker, EntityLivingBase defender){
		return false;
	}
	
	public EnumAction getItemUseAction(ItemStack is){
		IExploit ex = ExploitUtils.getExploitById(is.getItemDamage());
		if(ex.isRanged()){
			return EnumAction.BOW;
		}else{
			if(ex.canTargetSelf())
			return EnumAction.EAT;
		}
		return EnumAction.NONE;
	}
	
	
	public boolean onLeftClickEntity(ItemStack stack, EntityPlayer player, Entity target){
		IExploit ex = this.getExploit(stack);
		if(ex.canTargetOthers()){
			if(target instanceof EntityPlayer) {
                ex.targetUser((EntityPlayer) target);
                if(ex.isConsumed())
                    player.destroyCurrentEquippedItem();
            }
			else if(ex.canTargetMobs() && target instanceof EntityLiving) {
                ex.targetMob(target);
                if(ex.isConsumed())
                     player.destroyCurrentEquippedItem();
            }
			return true;
		}
		return false;
	}

	@Override
	public boolean onItemUse(ItemStack stack, EntityPlayer playerIn, World worldIn, BlockPos pos, EnumFacing side, float hitX, float hitY, float hitZ) {
		IExploit ex = this.getExploit(stack);
		if(ex.canTargetOthers() && ex.isRanged()){
			if(ex.isConsumed())
				playerIn.destroyCurrentEquippedItem();
			return true;
		}else if(ex.canTargetSelf()){
			if(ex.isConsumed())
				playerIn.destroyCurrentEquippedItem();
			ex.targetSelf(playerIn);
			return true;
		}
		return false;
	}

	
	public ItemStack onItemRightClick(ItemStack is, World world, EntityPlayer player){
		IExploit ex = this.getExploit(is);
		if(ex.canTargetOthers() && ex.isRanged()) {
			super.onItemRightClick(is, world, player);
		}else if(ex.canTargetSelf()){
			ex.targetSelf(player);
            if(ex.isConsumed())
                player.destroyCurrentEquippedItem();
			return is;
		}
		return is;
	}
	
	
	public String getUnlocalizedName(ItemStack is) {
		return getExploit(is).getName();
	}
	
	public int getMaxItemUseDuration(ItemStack is){
		IExploit ex = this.getExploit(is);
		if(ex.isRanged()) return 72000;
		if(ex.canTargetSelf()) return 32;
		return 0;
	}
	
}
